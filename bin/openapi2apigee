#!/usr/bin/env node
'use strict';

var program = require('commander');
var command = require('../lib/commands/generateApi/generateApi.js');
var deploy = require('../lib/commands/deployApi/deployApi.js');
var version = require('../lib/util/cli').version();

var executed = false;

program
  .version(version)
  .usage('<command> <options>')
  .command('generateApi <apiProxy>');

program
  .option('-s, --source <source>', 'openapi File Source.')
  .option('-d, --destination <destination>', 'API Bundle destination location.')
  .option('-D, --deploy', 'Deploy to Apigee Edge')
  .option('-b, --baseuri <baseuri>', 'Apigee Edge EndPoint to Deploy')
  .option('-o, --organization <organization>', 'Apigee Edge Organization to Deploy')
  .option('-e, --environments <environments>', 'Comma-separated Apigee Edge Environments to Deploy, like \"test,prod\"')
  .option('-v, --virtualhosts <virtualhosts>', 'Comma-separated Apigee Edge virtual hosts to Deploy, like \"default,secure\"')
  .option('-u, --username <username>', 'Apigee Edge Username to Deploy')
  .option('-p, --password <password>', 'Apigee Edge Password to Deploy')
  .option('-t, --targeturl <targeturl>', 'Overrides spec-provided target URL for default target endpoint')

  .description('Generates Apigee API Bundle from OpenAPI/Swagger 2.0 spec file')
  .action(function(apiProxy, options) {

    //printOptionValues(options);

    executed = true;
    command.generateApi(apiProxy, options, function(err, reply) {
      if(err) {
        console.log(err);
        process.exit(1);
      }
      else {
        if (options.destination) {
          console.log('Apigee API bundle generated in location ' + options.destination);
        }
        else {
          console.log('Apigee API bundle generated in current directory. ');
        }
        if (options.deploy) {
          deploy.deployApi(apiProxy, options, function (err, reply) {
            if (err) {
              console.log(err);
              process.exit(1);
            }
            else {
              console.log('Deployment to Apigee successfully completed.');
            }
          });
        }
      }
    });
  });

program.on('--help', function(){
  console.log('\nExamples:');
  console.log('');
  console.log('    $ openapi2apigee generateApi --help');
  console.log('    $ openapi2apigee generateApi -s http://petstore.openapi.io/v2/openapi.json -d /Users/Anil/Desktop/ -D petStore');
  console.log('');
});

program.parse(process.argv);

if (!process.argv.slice(2).length || !executed) {
  program.outputHelp();
  process.exit(1);
}

function printOptionValues(options) {

  console.log('Execution parameters:');

  options.options.forEach(element => {
    var argName = element.long.substring(2);
    var optionValue = options[argName];

    if(argName && (typeof optionValue === 'string' || optionValue == null))  {

      if(optionValue == null)
        optionValue = '(null)';
      else {
        switch(element.short) {
          case '-p': // Password, don't show
            optionValue = "**************";
            break;
          case '-u': // Username needs obfuscation
            var atIndex = optionValue.indexOf("@");
            optionValue = optionValue.substring(0, 1) + "*************" + 
                (atIndex < 0 ? "" : optionValue.substring(atIndex));
            break;
        }
      }

      console.log(element.short, ":", optionValue);
    }
  });
}